# utils/kml_parser.py
#
# Script to convert the area boundaries from KML to GeoJSON format.
# This script was generated by Claude.ai
# This script only needs to be run once (ever) and is not needed
# if static/data/area_boundaries.json exists.
#
import xml.etree.ElementTree as ET
import json
import re


def parse_kml_file(kml_file_path):
    """
    Parse KML file and extract Vancouver CBC count area data.
    Returns list of area dictionaries with coordinates in GeoJSON format.
    """
    with open(kml_file_path, 'r', encoding='utf-8') as file:
        kml_content = file.read()

    # Parse XML
    root = ET.fromstring(kml_content)

    # Define KML namespace
    ns = {'kml': 'http://www.opengis.net/kml/2.2'}

    areas = []

    # Find all Placemark elements
    for placemark in root.findall('.//kml:Placemark', ns):
        name_elem = placemark.find('kml:name', ns)
        if name_elem is None:
            continue

        name = name_elem.text

        # Extract area letter code (A-X)
        letter_match = re.search(r'Area ([A-X])', name)
        if not letter_match:
            continue

        letter_code = letter_match.group(1)

        # Get description
        desc_elem = placemark.find('kml:description', ns)
        description = desc_elem.text if desc_elem is not None else ''

        # Clean HTML tags from description
        description = re.sub(r'<[^>]*>', '', description).strip()

        # Find polygon coordinates
        coords_elem = placemark.find('.//kml:coordinates', ns)
        if coords_elem is not None:
            coord_string = coords_elem.text.strip()
            coordinates = parse_coordinates_to_geojson(coord_string)

            # Estimate max participants based on area size and description
            max_participants = estimate_max_participants(letter_code, description)

            area_data = {
                'letter_code': letter_code,
                'name': name,
                'description': description,
                'max_participants': max_participants,
                'geometry': {
                    'type': 'Polygon',
                    'coordinates': [coordinates]  # GeoJSON format
                }
            }

            areas.append(area_data)

    # Sort by letter code
    areas.sort(key=lambda x: x['letter_code'])

    return areas


def parse_coordinates_to_geojson(coord_string):
    """
    Convert KML coordinate string to GeoJSON coordinate array.
    KML format: longitude,latitude,altitude (space-separated)
    GeoJSON format: [longitude, latitude] (no altitude)
    """
    coordinates = []

    for coord in coord_string.split():
        coord = coord.strip()
        if coord:
            parts = coord.split(',')
            if len(parts) >= 2:
                lng = float(parts[0])
                lat = float(parts[1])
                coordinates.append([lng, lat])

    return coordinates


def estimate_max_participants(letter_code, description):
    """
    Estimate maximum participants for each area based on size and complexity.
    These can be adjusted by administrators later.
    """
    # Default values based on typical CBC area sizes
    defaults = {
        'A': 15, 'B': 12, 'C': 15, 'D': 12, 'E': 18, 'F': 16,
        'G': 14, 'H': 12, 'I': 10, 'J': 12, 'K': 14, 'L': 8,
        'M': 12, 'N': 10, 'O': 12, 'P': 14, 'Q': 16, 'R': 14,
        'S': 18, 'T': 16, 'U': 14, 'V': 12, 'W': 10, 'X': 8
    }

    return defaults.get(letter_code, 12)  # Default to 12 if not found


def save_areas_to_json(areas, output_path):
    """
    Save parsed area data to JSON file for use by web application.
    """
    with open(output_path, 'w', encoding='utf-8') as file:
        json.dump(areas, file, indent=2, ensure_ascii=False)

    print(f"Saved {len(areas)} areas to {output_path}")


def generate_area_summary(areas):
    """
    Generate summary statistics about the parsed areas.
    """
    total_max = sum(area['max_participants'] for area in areas)

    print(f"\nVancouver CBC Area Summary:")
    print(f"Total areas: {len(areas)}")
    print(f"Total maximum participants: {total_max}")
    print(f"Average max per area: {total_max / len(areas):.1f}")

    print(f"\nAreas by letter code:")
    for area in areas:
        coord_count = len(area['geometry']['coordinates'][0])
        print(f"  {area['letter_code']}: {area['name']} "
              f"(max: {area['max_participants']}, {coord_count} boundary points)")


# Main execution script for one-time KML parsing
if __name__ == "__main__":
    import os

    # Parse the KML file and save to JSON
    kml_file = "Vancouver_CBC_Areas.kml"  # Your uploaded KML file
    output_file = "../static/data/area_boundaries.json"  # Relative to utils/ directory

    try:
        # Create output directory if it doesn't exist
        output_dir = os.path.dirname(output_file)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
            print(f"Created directory: {output_dir}")

        areas = parse_kml_file(kml_file)
        save_areas_to_json(areas, output_file)
        generate_area_summary(areas)

        print(f"\nSuccess! Area boundaries extracted to {output_file}")
        print("You can now use this JSON file in your web application.")

    except FileNotFoundError as e:
        if kml_file in str(e):
            print(f"Error: Could not find KML file '{kml_file}'")
            print("Make sure the file is in the same directory as this script.")
        else:
            print(f"File error: {e}")
    except ET.ParseError as e:
        print(f"Error parsing KML file: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

# config/areas.py - Area configuration for the application
AREA_CONFIG = {
    'A': {
        'name': 'Area A - North Shore West',
        'description': 'West of the Capilano River, North of the Trans Canada Highway',
        'difficulty': 'Moderate',
        'terrain': 'Mountainous, some trails'
    },
    'B': {
        'name': 'Area B - North Shore Coastal',
        'description': 'South of Trans Canada, West of Capilano Road, marine boundary',
        'difficulty': 'Easy',
        'terrain': 'Coastal, urban parks'
    },
    'C': {
        'name': 'Area C - Lynn Valley',
        'description': 'North of Trans Canada Highway between Lynn Creek and Capilano River',
        'difficulty': 'Moderate',
        'terrain': 'Forested, residential'
    },
    'D': {
        'name': 'Area D - North Vancouver East',
        'description': 'South of Trans Canada Highway, east from Capilano Rd',
        'difficulty': 'Easy',
        'terrain': 'Urban, waterfront'
    },
    'E': {
        'name': 'Area E - Burnaby Heights',
        'description': 'East from Lynn Creek, north from Burrard Inlet midpoint',
        'difficulty': 'Moderate',
        'terrain': 'Hillside residential, parks'
    },
    'F': {
        'name': 'Area F - Burnaby Mountain',
        'description': 'East from Trans Canada, north from Lougheed to Burrard Inlet',
        'difficulty': 'Moderate',
        'terrain': 'University, conservation area'
    },
    'G': {
        'name': 'Area G - Burnaby South',
        'description': 'Between Lougheed Highway and Kingsway, east of Boundary Road',
        'difficulty': 'Easy',
        'terrain': 'Suburban residential'
    },
    'H': {
        'name': 'Area H - New Westminster',
        'description': 'North from Fraser River midpoint, east from Boundary Road',
        'difficulty': 'Easy',
        'terrain': 'Urban, riverfront'
    },
    'I': {
        'name': 'Area I - South Vancouver East',
        'description': 'North from Fraser River, between Fraser Street and Boundary Road',
        'difficulty': 'Easy',
        'terrain': 'Industrial, residential'
    },
    'J': {
        'name': 'Area J - Riley Park/Kensington',
        'description': 'West from Boundary Road, between Broadway and 41st Avenue',
        'difficulty': 'Easy',
        'terrain': 'Dense residential'
    },
    'K': {
        'name': 'Area K - Mount Pleasant/Grandview',
        'description': 'North from Broadway, between Main Street and Boundary Road',
        'difficulty': 'Easy',
        'terrain': 'Urban, light industrial'
    },
    'L': {
        'name': 'Area L - Downtown Vancouver',
        'description': 'Downtown core plus False Creek Flats, marine boundaries',
        'difficulty': 'Easy',
        'terrain': 'Dense urban, waterfront'
    },
    'M': {
        'name': 'Area M - Cambie Corridor',
        'description': 'East from Granville, between 7th Avenue and Kingsway',
        'difficulty': 'Easy',
        'terrain': 'Dense residential, transit corridor'
    },
    'N': {
        'name': 'Area N - South Vancouver Central',
        'description': 'South from 41st Avenue between Granville and Fraser River',
        'difficulty': 'Easy',
        'terrain': 'Suburban, some industrial'
    },
    'O': {
        'name': 'Area O - Marpole',
        'description': 'South from 33rd between Granville and Camosun to Fraser River',
        'difficulty': 'Easy',
        'terrain': 'Residential, airport vicinity'
    },
    'P': {
        'name': 'Area P - Kitsilano/Fairview',
        'description': 'Central Vancouver, marine boundary considerations',
        'difficulty': 'Easy',
        'terrain': 'Dense residential, beaches'
    },
    'Q': {
        'name': 'Area Q - Point Grey',
        'description': 'West from Blanca, north from W 16th Avenue, marine boundaries',
        'difficulty': 'Moderate',
        'terrain': 'Beaches, parks, residential'
    },
    'R': {
        'name': 'Area R - UBC/Musqueam',
        'description': 'University and endowment lands, Musqueam territory',
        'difficulty': 'Moderate',
        'terrain': 'University campus, forest, beach'
    },
    'S': {
        'name': 'Area S - Fraser River South',
        'description': 'South shore areas with marine boundaries',
        'difficulty': 'Moderate',
        'terrain': 'Riverfront, mixed development'
    },
    'T': {
        'name': 'Area T - Richmond East',
        'description': 'Eastern Richmond with marine boundaries',
        'difficulty': 'Easy',
        'terrain': 'Agricultural, suburban'
    },
    'U': {
        'name': 'Area U - Richmond Central',
        'description': 'Central Richmond areas',
        'difficulty': 'Easy',
        'terrain': 'Suburban, agricultural'
    },
    'V': {
        'name': 'Area V - Richmond West',
        'description': 'Richmond east of Number 5 Road, river counting coordination needed',
        'difficulty': 'Easy',
        'terrain': 'Agricultural, bog areas'
    },
    'W': {
        'name': 'Area W - Stanley Park',
        'description': 'Stanley Park and surrounding marine areas',
        'difficulty': 'Easy',
        'terrain': 'Urban park, seawall, beaches'
    },
    'X': {
        'name': 'Area X - Coal Harbour',
        'description': 'North and east from Stanley Park Causeway, marine boundaries',
        'difficulty': 'Easy',
        'terrain': 'Urban waterfront, marinas'
    }
}


def get_area_info(letter_code):
    """Get configuration info for a specific area."""
    return AREA_CONFIG.get(letter_code.upper(), {
        'name': f'Area {letter_code}',
        'description': 'Area description not available',
        'difficulty': 'Unknown',
        'terrain': 'Unknown'
    })


def get_all_areas():
    """Get list of all available area codes."""
    return sorted(AREA_CONFIG.keys())